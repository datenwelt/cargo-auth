/* eslint-disable no-unused-vars */
const mocha = require('mocha');
const describe = mocha.describe;
const after = mocha.after;
const afterEach = mocha.afterEach;
const before = mocha.before;
const beforeEach = mocha.beforeEach;
const it = mocha.it;

const assert = require('chai').assert;

const Path = require('path');
const Promise = require('bluebird');
const superagent = require('superagent');
const util = require('util');
const URI = require('urijs');
const VError = require('verror');

const CWD = process.cwd();
const TestConfig = require(Path.join(CWD, 'test/test-utils/test-config'));
const TestSchema = require(Path.join(CWD, 'test/test-utils/test-schema'));
const TestServer = require(Path.join(CWD, 'test/test-utils/test-server'));

const TestRouter = require(Path.join(CWD, 'src/server/assets/groups'));

const scriptName = 'server/assets/groups.js';
const path = '/groups';
const paramName = ':id';
const errorName = 'GROUP';

describe(scriptName, function () {

	let app = null;
	let config = null;
	let router = null;
	let schema = null;
	let server = null;
	let state = {};

	let baseURI = null;

	before(async function () {
		config = await TestConfig.get();
		schema = await TestSchema.get();
		await TestSchema.reset();
		server = await TestServer.start();
		router = new TestRouter('io.cargohub.authd.items', {schema: schema});
		app = await router.init(config, state);
		server.use(path, app);
		server.use(TestServer.createErrorHandler());
		baseURI = new URI(server.uri);
		baseURI.path(path);
		baseURI = baseURI.toString();

	});

	after(function (done) {
		server.server.close(done);
	});

	beforeEach(async function () {
		let db = await TestSchema.db();
		await db.query('DELETE FROM Groups');
		await Promise.map([1, 2, 3], function (id) {
			let name = 'group#' + id;
			return db.execute("INSERT INTO Groups (Id, Name) VALUES(?,?)", [
				id,
				name
			]);
		});
	});

	afterEach(async function () {
		await (await TestSchema.db()).query("DELETE FROM Groups");
	});


	describe('POST ' + path, function () {

		it('creates a new item', async function () {
			let response = null;
			try {
				response = await superagent.post(baseURI)
					.send({
						name: "test-1"
					});
			} catch (err) {
				if (err.response) {
					assert.strictEqual(err.response.status, 200, util.format('Request failed with status code %d: %s', err.response.status, err.response.get('X-Error')));
					return;
				}
				throw new VError(err);
			}
			assert.isDefined(response.get('X-Autogenerated-Values'));
			let [all, aiValue] = response.get('X-Autogenerated-Values').match(/id=(\d+)/);
			aiValue = Number(aiValue);
			assert.deepEqual(response.body, {
				id: aiValue,
				name: "test-1"
			});
		});

	});

	describe('GET ' + path, function () {

		it('loads the current items as a list', async function () {
			let resp = null;
			try {
				resp = await superagent.get(baseURI + "?offset=0&limit=15");
			} catch (err) {
				if (err.response) assert.fail(true, true, util.format('Request failed: %d %s', err.response.status, err.response.get('X-Error')));
				throw err;
			}
			let groups = resp.body;
			assert.deepEqual(groups, [
					{
						"id": 1,
						"name": "group#1"
					},
					{
						"id": 2,
						"name": "group#2"
					},
					{
						"id": 3,
						"name": "group#3"
					}
			]);
			assert.strictEqual(resp.get('x-list-offset'), "0");
			assert.strictEqual(resp.get('x-list-limit'), "15");
			assert.strictEqual(resp.get('x-list-count'), "3");
			assert.strictEqual(resp.get('x-list-order'), 'id;asc');
		});

	});

	describe('GET ' + path + "/" + paramName, function () {

		it('loads an existing item', async function () {
			let response = null;
			try {
				response = await superagent.get(baseURI + "/1");
			} catch (err) {
				if (err.response) {
					assert.strictEqual(err.response.status, 200, util.format('Request failed with status code %d: %s', err.response.status, err.response.get('X-Error')));
					return;
				}
				throw new VError(err);
			}
			assert.deepEqual(response.body, {
				"id": 1,
				"name": "group#1"
			});
		});

		it('responds with 404 if the item does not exist', async function () {
			await TestServer.expectErrorResponse(404, 'ERR_REQ_' + errorName + '_UNKNOWN',
				superagent.get(baseURI + "/4"));

		});

	});

	describe('POST ' + path + "/" + paramName, function () {

		it('changes an existing item', async function () {
			let response = null;
			try {
				response = await superagent
					.post(baseURI + "/1")
					.send({
						name: "testname-1"
					});
			} catch (err) {
				if (err.response) {
					assert.strictEqual(err.response.status, 200, util.format('Request failed with status code %d: %s', err.response.status, err.response.get('X-Error')));
					return;
				}
				throw new VError(err);
			}
			assert.deepEqual(response.body, {
				"id": 1,
				"name": "testname-1"
			});

		});

		it('responds with 404 ERR_REQ_' + errorName + '_UNKNOWN when the item does not exist', async function () {
			await TestServer.expectErrorResponse(404, 'ERR_REQ_' + errorName + '_UNKNOWN',
				superagent.post(baseURI + "/4")
					.send({
						"name": "testname-1"
					}));
		});

	});


	describe('PUT ' + path + "/" + paramName, function () {

		it('changes an existing item', async function () {
			let response = null;
			try {
				response = await superagent
					.put(baseURI + "/1")
					.send({
						"name": "testname"
					});
			} catch (err) {
				if (err.response) {
					assert.strictEqual(err.response.status, 200, util.format('Request failed with status code %d: %s', err.response.status, err.response.get('X-Error')));
					return;
				}
				throw new VError(err);
			}
			assert.deepEqual(response.body, {
				"id": 1,
				"name": "testname"
			});

		});

		it('responds with 404 ERR_REQ_' + errorName + '_UNKNOWN when the item does not exist', async function () {
			await TestServer.expectErrorResponse(404, 'ERR_REQ_' + errorName + '_UNKNOWN',
				superagent.put(baseURI + "/4").send({
					"name": "testname"
				}));
		});

	});

	describe('DELETE ' + path + "/" + paramName, function () {

		it('deletes an existing item', async function () {
			let response = null;
			try {
				response = await superagent.delete(baseURI + "/1");
			} catch (err) {
				if (err.response) {
					assert.strictEqual(err.response.status, 200, util.format('Request failed with status code %d: %s', err.response.status, err.response.get('X-Error')));
					return;
				}
				throw new VError(err);
			}
			assert.deepEqual(response.body, {});
		});

		it('responds with 200 when the item does not exist', async function () {
			let response = null;
			try {
				response = await superagent.delete(baseURI + "/4");
			} catch (err) {
				if (err.response) {
					assert.strictEqual(err.response.status, 200, util.format('Request failed with status code %d: %s', err.response.status, err.response.get('X-Error')));
					return;
				}
				throw new VError(err);
			}
			assert.deepEqual(response.body, {});
		});

	});
});


